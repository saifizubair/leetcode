 public static boolean isValid(char[][]board , int row  , int col , char ch){
        
        // checking if the row , col and the grid is not containing the same element...
        for(int i=0 ; i<board.length ; i++){
            if(board[i][col]==ch){
                return false;
            }
            if(board[row][i]==ch){
                return false;
            }
            if(board[3*(row/3)+i/3][3*(col/3)+i%3]==ch){
                return false;
            }
        }
        return true;
    }
    
    public static boolean solve(char[][] board){
        // checking all the cells of the board matrix..
        for(int i=0 ; i<board.length ; i++){
            for(int j=0 ; j<board.length ; j++){
                // only perform opertaion when the matrix cell is empty..
                if(board[i][j]=='.'){
                    for(char ch = '1' ; ch<='9' ; ch++){
                        if(isValid(board , i , j , ch)){
                            board[i][j] = ch;
                            
                            // checking if the value is absolutely right or just right for this instance..
                            if(solve(board)){
                                return true;
                            }
                            else{
                                board[i][j]='.';
                            }
                        }
                    }
                    return false;
                }
            }
        }
        // returning true if the matrix is already full..
        return true;
    }
    public void solveSudoku(char[][] board) {
        
        //calling the solve function..
        solve(board);
    }
